// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PhDManager.Api.Data;

#nullable disable

namespace PhDManager.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PhDManager.Core.Models.StudyProgram", b =>
                {
                    b.Property<Guid>("StudyProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("study_program_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("StudyProgramId")
                        .HasName("pk_study_programs");

                    b.ToTable("study_programs", (string)null);
                });

            modelBuilder.Entity("PhDManager.Core.Models.Subject", b =>
                {
                    b.Property<Guid>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("subject_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<int>("Credits")
                        .HasColumnType("integer")
                        .HasColumnName("credits");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("semester");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("SubjectId")
                        .HasName("pk_subjects");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_subjects_user_id");

                    b.ToTable("subjects", (string)null);
                });

            modelBuilder.Entity("PhDManager.Core.Models.Thesis", b =>
                {
                    b.Property<Guid>("ThesisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("thesis_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("SupervisorUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("supervisor_user_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("ThesisId")
                        .HasName("pk_theses");

                    b.HasIndex("SupervisorUserId")
                        .HasDatabaseName("ix_theses_supervisor_user_id");

                    b.ToTable("theses", (string)null);
                });

            modelBuilder.Entity("PhDManager.Core.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<DateTime?>("FirstLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_login");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<Guid?>("StudyProgramId")
                        .HasColumnType("uuid")
                        .HasColumnName("study_program_id");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_student_id");

                    b.HasIndex("StudyProgramId")
                        .HasDatabaseName("ix_users_study_program_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("StudyProgramSubject", b =>
                {
                    b.Property<Guid>("StudyProgramId")
                        .HasColumnType("uuid")
                        .HasColumnName("study_program_id");

                    b.Property<Guid>("SubjectsSubjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("subjects_subject_id");

                    b.HasKey("StudyProgramId", "SubjectsSubjectId")
                        .HasName("pk_study_program_subject");

                    b.HasIndex("SubjectsSubjectId")
                        .HasDatabaseName("ix_study_program_subject_subjects_subject_id");

                    b.ToTable("study_program_subject", (string)null);
                });

            modelBuilder.Entity("PhDManager.Core.Models.Subject", b =>
                {
                    b.HasOne("PhDManager.Core.Models.User", null)
                        .WithMany("Subjects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_subjects_users_user_id");
                });

            modelBuilder.Entity("PhDManager.Core.Models.Thesis", b =>
                {
                    b.HasOne("PhDManager.Core.Models.User", "Supervisor")
                        .WithMany("CreatedTheses")
                        .HasForeignKey("SupervisorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_theses_users_supervisor_user_id");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("PhDManager.Core.Models.User", b =>
                {
                    b.HasOne("PhDManager.Core.Models.Thesis", "Thesis")
                        .WithOne("Student")
                        .HasForeignKey("PhDManager.Core.Models.User", "StudentId")
                        .HasConstraintName("fk_users_theses_student_id");

                    b.HasOne("PhDManager.Core.Models.StudyProgram", "StudyProgram")
                        .WithMany()
                        .HasForeignKey("StudyProgramId")
                        .HasConstraintName("fk_users_study_programs_study_program_id");

                    b.Navigation("StudyProgram");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("StudyProgramSubject", b =>
                {
                    b.HasOne("PhDManager.Core.Models.StudyProgram", null)
                        .WithMany()
                        .HasForeignKey("StudyProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_study_program_subject_study_programs_study_program_id");

                    b.HasOne("PhDManager.Core.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_study_program_subject_subjects_subjects_subject_id");
                });

            modelBuilder.Entity("PhDManager.Core.Models.Thesis", b =>
                {
                    b.Navigation("Student");
                });

            modelBuilder.Entity("PhDManager.Core.Models.User", b =>
                {
                    b.Navigation("CreatedTheses");

                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
