@page "/thesis/add"

@using PhDManager.Core.IServices
@using PhDManager.Core.Models
@using PhDManager.Core.ValidationModels
@using System.Security.Claims

@attribute [Authorize(Roles = $"{nameof(Role.Admin)}, {nameof(Role.Teacher)}")]

@inject IThesisService ThesisService
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>Add Thesis</PageTitle>

<EditForm Model="ThesisData" FormName="add-thesis" OnSubmit="@HandleSubmit">
    <AntiforgeryToken />

    <RadzenStack>
        <RadzenLabel For="@((ThesisData thesis) => thesis.Title)" Text="Title" Component="Title" />
        <RadzenTextBox @bind-Value="@ThesisData.Title" Name="Title" />

        <RadzenLabel For="@((ThesisData thesis) => thesis.Description)" Text="Description" Component="Description" />
        <RadzenTextArea @bind-Value="@ThesisData.Description" Name="Description" />


        <RadzenButton Text="Add" ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" />
    </RadzenStack>
</EditForm>

@code {
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [SupplyParameterFromForm]
    public ThesisData ThesisData { get; private set; } = default!;

    private AuthenticationState _authenticationState = default!;

    protected override async Task OnInitializedAsync()
    {
        ThesisData = new();
        _authenticationState = await AuthenticationStateTask;
    }

    public async Task HandleSubmit()
    {
        var claims = _authenticationState.User.Identity as ClaimsIdentity;
        var id = int.Parse(claims.Claims.First(claim => claim.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/sid").Value);
        var thesis = new Thesis
            {
                Title = ThesisData.Title,
                Description = ThesisData.Description,
                Year = DateTime.Now.Year,
                UserId = id
            };

        await ThesisService.CreateThesis(thesis);

        NavigationManager.NavigateTo("thesis");
    }
}
